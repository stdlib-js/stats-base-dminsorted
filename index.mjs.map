{"version":3,"file":"index.mjs","sources":["../lib/dminsorted.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a sorted double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - sorted input array\n* @param {integer} stride - stride length\n* @returns {number} minimum value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n* var N = x.length;\n*\n* var v = dminsorted( N, x, 1 );\n* // returns 1.0\n*/\nfunction dminsorted( N, x, stride ) {\n\tvar v1;\n\tvar v2;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tv1 = x[ (1-N) * stride ];\n\t\tv2 = x[ 0 ];\n\t} else {\n\t\tv1 = x[ 0 ];\n\t\tv2 = x[ (N-1) * stride ];\n\t}\n\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v1 === v2 ) {\n\t\tif ( isNegativeZero( v1 ) || isNegativeZero( v2 ) ) {\n\t\t\treturn -0.0;\n\t\t}\n\t\treturn v1;\n\t}\n\tif ( v1 < v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\n\nexport default dminsorted;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a sorted double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - sorted input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} minimum value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import floor from '@stdlib/math-base-special-floor';\n*\n* var x = new Float64Array( [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dminsorted( N, x, 2, 1 );\n* // returns -3.0\n*/\nfunction dminsorted( N, x, stride, offset ) {\n\tvar v1;\n\tvar v2;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tv1 = x[ offset ];\n\tv2 = x[ offset + ((N-1)*stride) ];\n\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v1 === v2 ) {\n\t\tif ( isNegativeZero( v1 ) || isNegativeZero( v2 ) ) {\n\t\t\treturn -0.0;\n\t\t}\n\t\treturn v1;\n\t}\n\tif ( v1 < v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\n\nexport default dminsorted;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dminsorted from './dminsorted.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dminsorted, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dminsorted;\n"],"names":["dminsorted","N","x","stride","v1","v2","NaN","isnan","isNegativeZero","offset","setReadOnly","ndarray"],"mappings":";;iTA6CA,SAASA,EAAYC,EAAGC,EAAGC,GAC1B,IAAIC,EACAC,EAEJ,OAAKJ,GAAK,EACFK,IAEG,IAANL,GAAsB,IAAXE,EACRD,EAAG,IAENC,EAAS,GACbC,EAAKF,GAAI,EAAED,GAAKE,GAChBE,EAAKH,EAAG,KAERE,EAAKF,EAAG,GACRG,EAAKH,GAAID,EAAE,GAAKE,IAEZI,EAAOH,IAAQG,EAAOF,GACnBC,IAEHF,IAAOC,EACNG,EAAgBJ,IAAQI,EAAgBH,IACpC,EAEFD,EAEHA,EAAKC,EACFD,EAEDC,EACR,CC5BA,SAASL,EAAYC,EAAGC,EAAGC,EAAQM,GAClC,IAAIL,EACAC,EAEJ,OAAKJ,GAAK,EACFK,IAEG,IAANL,GAAsB,IAAXE,EACRD,EAAG,IAEXE,EAAKF,EAAGO,GACRJ,EAAKH,EAAGO,GAAWR,EAAE,GAAGE,GACnBI,EAAOH,IAAQG,EAAOF,GACnBC,IAEHF,IAAOC,EACNG,EAAgBJ,IAAQI,EAAgBH,IACpC,EAEFD,EAEHA,EAAKC,EACFD,EAEDC,EACR,CC3CAK,EAAAV,EAAA,UAAAW"}